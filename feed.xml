<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://wp-research-uk.github.io/cw-erm/feed.xml" rel="self" type="application/atom+xml"/><link href="https://wp-research-uk.github.io/cw-erm/" rel="alternate" type="text/html" hreflang="en"/><updated>2022-11-07T13:13:53+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/feed.xml</id><title type="html">CW-ERM</title><subtitle>CW-ERM: Improving Autonomous Driving Planning with Closed-loop Weighted Empirical Risk Minimization </subtitle><entry><title type="html">CW-ERM: Improving Autonomous Driving Planning with Closed-loop Weighted Empirical Risk Minimization</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2022/cw-erm/" rel="alternate" type="text/html" title="CW-ERM: Improving Autonomous Driving Planning with Closed-loop Weighted Empirical Risk Minimization"/><published>2022-11-03T00:00:00+00:00</published><updated>2022-11-03T00:00:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2022/cw-erm</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2022/cw-erm/"><![CDATA[<p><a href="https://arxiv.org/abs/2210.02174" style="border-bottom: none;"> <button type="button" class="btn btn-primary btn-lg">Read ArXiv Paper <i class="fas fa-sticky-note"></i></button> </a></p> <h2 id="introduction">Introduction</h2> <p>Imitation Learning (IL), and especially Behavioral Cloning (BC) are widely used today for many tasks. BC is of especial interest because it can take advantage of the supervised learning properties such as sample complexity and learning from historical data (demonstrations). Behavioral Cloning (BC), however, still face fundamental challenges <d-cite key="codevilla2019exploring"></d-cite>, including causal confusion <d-cite key="causal-confusion"></d-cite> (later identified as a feedback-driven covariate shift <d-cite key="three-regimes"></d-cite>) and dataset biases <d-cite key="codevilla2019exploring"></d-cite>, to name a few.</p> <p>One of the main issues of BC that is often overlooked, especially in policies trained for autonomous vehicles (AVs) is the mismatch between the training and inference-time distributions. Usually, BC policies are trained in an open-loop fashion, predicting the next action given the immediate previous action and optionally conditioned on recent past actions. This is quite different than the way that these policies are evaluated and deployed. During test time, the policy is used not only to predict an action, but this action is also execute in the simulated or real-world environment and impacts the next state. This difference is explained in the image below:</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/ol_vs_cl-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/ol_vs_cl-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/ol_vs_cl-1400.webp"/> <img src="/cw-erm/assets/img/ol_vs_cl.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-page"> Figure 1: comparison between Open-loop and Closed-loop training/evaluation of driving policies. </div> <p>When executed in real-world (or even in a simulated environment), small predictions errors can drive covariate shift and make the network predict in an out-of-distribution regime. In the animation below we can see an example of a policy that starts to diverge and is unable to recover:</p> <div class="row mt-3 l-body"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/diverge_loop.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/diverge_loop.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/diverge_loop.gif-1400.webp"/> <img src="/cw-erm/assets/img/diverge_loop.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-body"> Figure 2: animation showing a policy that starts to diverge and is unable to recover. </div> <p>If we imagine a State-Action manifold (SxA) like in the figure below, we can see how the state-action datapoints start to diverge from the data that the model was trained on:</p> <div class="row mt-3 l-body"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/state-action-manifold.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/state-action-manifold.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/state-action-manifold.gif-1400.webp"/> <img src="/cw-erm/assets/img/state-action-manifold.gif" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-body"> Figure 3: animation showing how small errors can make the policy diverge outside of the training state-action manifold, this making the model predict in out-of-distribution regime. </div> <p>In this work, we address the mismatch between training and inference mentioned above through the development of a simple training principle. Using a closed-loop simulator, we first identify and then reweight samples that are important for the closed-loop performance of the policy. We call this approach <strong>CW-ERM</strong> (Closed-loop Weighted Empirical Risk Minimization), since we use Weighted ERM <d-cite key="covshift"></d-cite> to correct the training distribution in favour of closed-loop performance. We extensively evaluate this principle on real-world urban driving data and show that it can achieve significant improvements on planner metrics that matter for real-world performance (e.g. collisions).</p> <div class="card border shadow-0 mb-3 bg-white" style="font-weight: 1;"> <div class="card-header">Contributions</div> <div class="card-body"> <p class="card-text"> <ul> <li>We motivate and propose Closed-loop Weighted Empirical Risk Minimization (CW-ERM), a technique that leverages closed-loop evaluation metrics acquired from policy rollouts in a simulator to debias the policy network and reduce the distributional differences between training (open-loop) and inference time (closed-loop);</li> <li>We evaluate CW-ERM experimentally on a challenging urban driving dataset in a closed-loop fashion to show that our method, although simple to implement, yields significant improvements in closed-loop performance without requiring complex and computationally expensive closed-loop training methods;</li> <li>We also show an important connection of our method to a family of methods that addresses covariate shift through density ratio estimation.</li> </ul> </p> </div> </div> <h2 id="closed-loop-weighted-empirical-risk-minimization-cw-erm">Closed-loop Weighted Empirical Risk Minimization (CW-ERM)</h2> <h3 id="problem-setup">Problem setup</h3> <p>The traditional formulation of supervised learning for imitation learning, also called behavioral cloning (BC), can be formulated as finding the policy \(\hat{\pi}_{BC}\):</p> \[\DeclareMathOperator*{\argmax}{argmax} \DeclareMathOperator*{\argmin}{argmin} \begin{align} \label{eqn:bc-erm} \hat{\pi}_{BC} = \argmin_{\pi \in \Pi} \mathbb{E}_{s \sim d_{\pi^*}, a \sim \pi^*(s)}[\ell(s,a,\pi)] \end{align}\] <p>where the state $s$ is sampled from the expert state distribution \(d_{\pi^*}\) induced when following the expert policy \(\pi^*\). Actions $a$ are sampled from the expert policy \(\pi^*(s)\). The loss \(\ell\) is also known as the surrogate loss that will find the policy \(\hat{\pi}_{BC}\) that best mimics the unknown expert policy \(\pi^*(s)\). In practice, we only observe a finite set of state-action pairs \({(s_i, a^*_i)}_{i=1}^m\), so the optimization is only approximate and we then follow the Empirical Risk Minimization (ERM) principle to find the policy \(\pi\) from the policy class \(\Pi\).</p> <p>If we let \(\mathbb{E}_{s \sim d_{\pi^*}, a \sim \pi^*(s)}[\ell(s,a,\pi)] = \epsilon\), then it follows that \(J(\pi) \leq J(\pi^*) + T^2 \epsilon\) as shown by the proof in <d-cite key="pmlr-v9-ross10a"></d-cite>, where \(J\) is the total cost and \(T\) is the task horizon. As we can see, the total cost can grow quadratically in \(T\).</p> <p>When the policy \(\hat{\pi}_{BC}\) is deployed in the real-world, it will eventually make mistakes and then induce a state distribution \(d_{\hat{\pi}_{BC}}\) different than the one it was trained on ( \(d_{\pi^*}\)). During closed-loop evaluation of driving policies, non-imitative metrics such as collisions and comfort are also evaluated. However, they are often ignored in the surrogate loss or only implicitly learned by imitating the expert due to the difficulty of overcoming differentiability requirements, as smooth approximations of these metrics are still different than the non-differentiable counterparts often used. These policies can often show good results in open-loop training, but perform poorly in closed-loop evaluation or when deployed in a real SDV due to the differences between \(d_{\hat{\pi}_{BC}}\) and \(d_{\pi^*}\), where the estimator is no longer consistent.</p> <h3 id="cw-erm">CW-ERM</h3> <p>In our method, called <strong>Closed-loop Weighted Empirical Risk Minimization (CW-ERM)</strong>, we seek to debias a policy network from the open-loop performance towards closed-loop performance, making the model rely on features that are robust to closed-loop evaluation. Our method consists of three stages: the training of an identification policy, the use of that policy in closed-loop simulation to identify samples, and the training of a final policy network on a reweighted data distribution. More explicitly:</p> <h4 id="stage-1-identification-policy">Stage 1 (identification policy)</h4> <p>Train a traditional BC policy network in open-loop using ERM, to yield \(\hat{\pi}_{\text{ERM}}\).</p> <h4 id="stage-2-closed-loop-simulation">Stage 2 (closed-loop simulation)</h4> <p>Perform rollouts of the \(\hat{\pi}_{\text{ERM}}\) policy in a closed-loop simulator, collect closed-loop metrics and then identify the error set below:</p> \[\begin{align} \label{eqn:error-set} E_{\hat{\pi}_{\text{ERM}}} = \{(s_i, a_i)~\text{s.t.}~ {C(s_i, a_i)} &gt; 0 \}, \end{align}\] <p>where \(\text{s}_i\) is a training data sample, or scene with a fixed number of timesteps from the training set, \(\text{a}_i\) is the action performed during the roll-out and \(C(\cdot)\) is a cost such as the number of collisions found during closed-loop rollouts.</p> <h4 id="stage-3-final-policy">Stage 3 (final policy)</h4> <p>Train a new policy using weighted ERM where the scenes belonging to the error set \(E_{\hat{\pi}_{\text{ERM}}}\) are upweighted by a factor \(w(\cdot)\), yielding the policy \(\hat{\pi}_{\text{CW-ERM}}\):</p> \[\begin{equation} \label{eqn:bc-cw-erm} \argmin_{\pi \in \Pi} \mathbb{E}_{s \sim d_{\pi^*}, a \sim \pi^*(s)}[w(E_{\hat{\pi}_{\text{ERM}}}, s) \ell(s,a,\pi)] \end{equation}\] <p>As we can see, the CW-ERM policy in Equation \(\ref{eqn:bc-cw-erm}\) is very similar to the original BC policy trained with ERM in Equation \(\ref{eqn:bc-erm}\), with the key difference of a weighting term based on the error set from closed-loop simulation in Stage 2. In practice, although statistically equivalent, we upsample scenes by a fixed factor rather than reweighting, as it is known to be more stable and robust <d-cite key="resampling-outperforms"></d-cite>.</p> <p>By training a policy using CW-ERM, we expect it to upsample scenes that perform poorly in closed-loop evaluation, making the policy network robust to the covariate shift seen during inference time while unrolling the policy. In the figure below you can see a visual overview of the steps involved into CW-ERM:</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/cwerm-diagram-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/cwerm-diagram-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/cwerm-diagram-1400.webp"/> <img src="/cw-erm/assets/img/cwerm-diagram.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-page"> Figure 4: High-level overview of our proposed Closed-loop Weighted Empirical Risk Minimization (CW-ERM) method. In steps <strong>(1-2)</strong> we train an identification policy $\hat{\pi}_{\text{ERM}}$ using traditional ERM <d-cite key="vapnik1991"></d-cite> on a set of training data samples or driving "scenes". In step <strong>(3)</strong>, we perform closed-loop simulation of the policy $\hat{\pi}_{\text{ERM}}$ and collect metrics to construct the error set in step <strong>(4)</strong>. With the error set in hand, we upsample scenes in the training set as shown in step <strong>(5)</strong>. We train the final policy $\hat{\pi}_{\text{CW-ERM}}$ using CW-ERM as shown in step <strong>(6)</strong> with the upsampled $\mathcal{D}_{\text{up}}$ set. </div> <h3 id="interesting-connection-with-covariate-shift-adaptation-with-density-ratio-estimation">Interesting connection with covariate shift adaptation with density ratio estimation</h3> <p>One important connection of our method is with covariate shift correction using density ratio estimation <d-cite key="covshift"></d-cite>. To correct for the covariate shift, the negative log-likelihood is often weighted by the density ratio \(r(s)\):</p> \[\begin{equation} \label{eqn:bc-density-ratio} \argmin_{\pi \in \Pi} \mathbb{E}_{s \sim d_{\pi^*}, a \sim \pi^*(s)}[r(s) \ell(s,a,\pi)] \end{equation}\] <p>where \(r(s)\) is defined as the density ratio between test and training distributions:</p> \[\begin{equation} \label{eqn:density-ratio} r(s) = \frac{p_{\text{test}}(s)}{p_{\text{train}}(s)} \end{equation}\] <p>In practice, \(r(s)\) is difficult to compute and is thus estimated. The density ratio will be higher when the sample is more important for the test distribution. In our method (CW-ERM), instead of using the density ratio to weight training samples, we resample the training set based on an estimate of each data point’s importance towards good closed-loop behaviours. Like the density ratio, the weighting in our case will also be higher for when the sample is important for the test distribution.</p> <p>One key characteristic of the importance weighted estimator is that it can be consistent even under covariate shift. We leave, however, the analysis of theoretical properties of our approximation for future work.</p> <h2 id="experimental-evaluation">Experimental evaluation</h2> <h3 id="network-architecture">Network architecture</h3> <p>Our method is agnostic to model architecture choices. To evaluate our CW-ERM approach, we adopt the recent network architecture of <d-cite key="vitelli2022safetynet"></d-cite> to represent a strong baseline performance for SDV planning, as we already tested and deployed in public roads. This model uses a transformer-based <d-cite key="transformers_all_you_need"></d-cite> architecture with a vectorial input representation <d-cite key="gao2020vectornet"></d-cite> to create features for each element into vector sets. It consists of a PointNet-based <d-cite key="qi2016pointnet"></d-cite> module for local processing of vectorized inputs and a global graph using a Transformer encoder for reasoning about interactions with agents and map features. Differently from <d-cite key="vitelli2022safetynet"></d-cite>, we don’t use a safety layer, as we want to evaluate the planner performance without external trajectory fallbacks. For further details, please refer to <d-cite key="vitelli2022safetynet"></d-cite>.</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/arch-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/arch-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/arch-1400.webp"/> <img src="/cw-erm/assets/img/arch.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-page"> Figure 5: Overview of the network architecture employed to evaluate CW-ERM. Image from <d-cite key="vitelli2022safetynet"></d-cite>. </div> <h3 id="evaluation-framework">Evaluation framework</h3> <p>We compute the closed-loop evaluation metrics by doing rollouts of the policy in the log-replayed scenes on a simulator (please refer to the reproducibility section for details on the open-sourcing of the simulator and metrics used in this work). During the unroll, trajectories are recorded. An evaluation plan composed of a set of metrics and constraints is executed over the recorded trajectories. We count every scene that violated a constraint (e.g., a collision) and then compute the confidence intervals (CIs) for each metric using a Binomial exact posterior estimation with a flat prior, which gives similar results (up to rounding errors) to bootstrapping as recommended in <d-cite key="rl-statistical-precipice-2021"></d-cite>.</p> <p>Metrics computed in the closed-loop simulator are used to construct the error set. In our evaluation we consider certain important metrics: the number of front collisions, side collisions, rear collisions, and distance from reference trajectory. The distance from reference trajectory considers the entire target trajectory for the current simulated point. A failed scene with respect to this metric is one where the distance of the simulated center of the SDV to the closest point in the target trajectory is farther than four meters.</p> <p>In our evaluation, we perform two sets of experiments: <strong>single metric</strong> and <strong>multi metric</strong>. In single metric experiments we construct the error set using only a single metric, while for multi metric we use scenes from multiple metrics together.</p> <h3 id="results">Results</h3> <p>In the table below we show a baseline method of behavioral cloning (ERM) with and without perturbations together with the results from single and multi-metric experiments. Lower is better for all metrics:</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/results-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/results-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/results-1400.webp"/> <img src="/cw-erm/assets/img/results.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption l-page"> Figure 6: Visual representation of the experimental results from closed-loop evaluation in simulation. Confidence intervals (CIs) were calculated using .95 interval from an exact Binomial posterior with a flat prior. In this plot we only compare against the best baseline (ERM with perturbation). </div> <h4 id="single-metric">Single-metric</h4> <p>We show the results from single metric experiments in Figure 6. We can see that the number of collisions significantly reduced for both side and front collision experiments. We found improvements in the <strong>range of ~35% on the test set for some metrics when compared to the baseline</strong>.</p> <p>We also found that the largest margin of improvements targeting single metrics in isolation were seen when using single metric based error set, while a balance was achieved when targeting multiple metrics, which suggests a Pareto front of solutions when targeting multiple objectives.</p> <p>Variance is also lower in some cases when compared to the baseline. We note that while upsampling a certain metric, it shows noticeable improvements in other related metrics. For example, in our single metric experiments, we see that improving side collisions also improve rear collisions. This is evidence that the model is not only getting better at side collisions but also becoming less passive (as indicated by reduction in rear collisions, due to log-replayed agents in simulation that are non-reactive).</p> <h4 id="multi-metric">Multi-metric</h4> <p>In our multi-metric experiments, we combine two or more metrics - namely \(m_{1},m_{2}..m_{N}\) - into a single upsampling experiment. The metrics are equally weighted and hence scenes that fail due to any \(m_i\) will be added to the error set. While improvements are noticeable upon combining Front and Side collisions or Front, Side and Distance to the reference trajectory in Figure 6, considerable regression is observed when adding rear collisions. As we can see from the experiments, this is clearly related to the amount of false-positives (FPs) in rear collisions due to the lack of agent reactivity during log playback in the simulator.</p> <h3 id="closed-loop-evaluation-samples">Closed-loop evaluation samples</h3> <p>Here we show some samples from our test set, comparing the same scene using ERM (left) and CW-ERM (right), in this case we can see CW-ERM avoiding a front collisions when compared to the traditional ERM policy:</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/16158_baseline_comp.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/16158_baseline_comp.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/16158_baseline_comp.gif-1400.webp"/> <img src="/cw-erm/assets/img/16158_baseline_comp.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/16158_candidate_comp_fc.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/16158_candidate_comp_fc.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/16158_candidate_comp_fc.gif-1400.webp"/> <img src="/cw-erm/assets/img/16158_candidate_comp_fc.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 7: Same scene from the test set showing the difference in policy behavior. As we can see, the policy on the left using traditional ERM is causing a front collisions, while the same scene in the right for a policy trained with CW-ERM is showing the ego slowing correctly for traffic ahead. </div> <p>In the scene below, also from the test set, we can see CW-ERM avoiding a side collision when compared to a traditional ERM policy:</p> <div class="row mt-3 l-page"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/erm-side-coll.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/erm-side-coll.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/erm-side-coll.gif-1400.webp"/> <img src="/cw-erm/assets/img/erm-side-coll.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/cw-erm/assets/img/cwerm-side-coll.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/cw-erm/assets/img/cwerm-side-coll.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/cw-erm/assets/img/cwerm-side-coll.gif-1400.webp"/> <img src="/cw-erm/assets/img/cwerm-side-coll.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 8: Same scene from the test set showing the difference in policy behavior. Policy on the left (ERM) uses traditional ERM and shows a side collision, while the policy on the right (CW-ERM) stays behid the large vehicle. </div> <h2 id="discussion">Discussion</h2> <p>Most recent improvements in imitation learning are based on improving the asymptotic performance of algorithms. In this work we showed a different direction that tackles the problem by directly addressing the mismatch between training and inference without requiring an extra human oracle or adding extra complexity during training. Our method is as simple as upsampling scenes by leveraging any existing simulator and training two models, yet it showed that there is still room for significant improvements without having to deal with human-in-the-loop, training rollouts or impacting the policy inference latency. We also described an important potential connection of our method with density ratio estimation for covariate shift correction <d-cite key="covshift"></d-cite>, which we believe is an exciting future research direction that could provide better theoretical understanding of the improvements seen in our experiments.</p> <h2 id="citation">Citation</h2> <p>If you found our work useful, please consider citing it:</p> <pre>
@article{kumar2022-cwerm,
  doi = {10.48550/ARXIV.2210.02174},
  url = {https://arxiv.org/abs/2210.02174},
  author = {Kumar, Eesha and Zhang, Yiming and Pini, Stefano and Stent, Simon and Ferreira, Ana and Zagoruyko, Sergey and Perone, Christian S.},
  title = {CW-ERM: Improving Autonomous Driving Planning with Closed-loop Weighted Empirical Risk Minimization},
  publisher = {arXiv},
  year = {2022},
}
</pre> <h2 id="acknowledgement">Acknowledgement</h2> <p>We would like to thank Kenta Miyahara, Nobuhiro Ogawa and Ezequiel Castellano for the review of this work and everyone from the UK Research Team and the ML Planning team who supported this work through the ecosystem needed for all experiments, and for the fruitful discussions.</p> <h3 id="reproducibility">Reproducibility</h3> <p>We make available our closed-loop simulator and the closed-loop metrics used in this work in the <a href="https://woven-planet.github.io/l5kit">L5Kit open-source repository</a>.</p>]]></content><author><name>Eesha Kumar *</name></author><summary type="html"><![CDATA[Improving Autonomous Driving Planning with Closed-loop Weighted Empirical Risk Minimization]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with diagrams</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams"/><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2021/diagrams</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <h2 id="mermaid">Mermaid</h2> <p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1667826847182" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1667826847182 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1667826847182 .node circle,#mermaid-1667826847182 .node ellipse,#mermaid-1667826847182 .node polygon,#mermaid-1667826847182 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1667826847182 .node.clickable{cursor:pointer}#mermaid-1667826847182 .arrowheadPath{fill:#333}#mermaid-1667826847182 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1667826847182 .edgeLabel{background-color:#e8e8e8}#mermaid-1667826847182 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1667826847182 .cluster text{fill:#333}#mermaid-1667826847182 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1667826847182 .actor{stroke:#ccf;fill:#ececff}#mermaid-1667826847182 text.actor{fill:#000;stroke:none}#mermaid-1667826847182 .actor-line{stroke:grey}#mermaid-1667826847182 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1667826847182 .messageLine0,#mermaid-1667826847182 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1667826847182 #arrowhead{fill:#333}#mermaid-1667826847182 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1667826847182 .messageText{fill:#333;stroke:none}#mermaid-1667826847182 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1667826847182 .labelText,#mermaid-1667826847182 .loopText{fill:#000;stroke:none}#mermaid-1667826847182 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1667826847182 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1667826847182 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1667826847182 .section{stroke:none;opacity:.2}#mermaid-1667826847182 .section0{fill:rgba(102,102,255,.49)}#mermaid-1667826847182 .section2{fill:#fff400}#mermaid-1667826847182 .section1,#mermaid-1667826847182 .section3{fill:#fff;opacity:.2}#mermaid-1667826847182 .sectionTitle0,#mermaid-1667826847182 .sectionTitle1,#mermaid-1667826847182 .sectionTitle2,#mermaid-1667826847182 .sectionTitle3{fill:#333}#mermaid-1667826847182 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1667826847182 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1667826847182 .grid path{stroke-width:0}#mermaid-1667826847182 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1667826847182 .task{stroke-width:2}#mermaid-1667826847182 .taskText{text-anchor:middle;font-size:11px}#mermaid-1667826847182 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1667826847182 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1667826847182 .taskText0,#mermaid-1667826847182 .taskText1,#mermaid-1667826847182 .taskText2,#mermaid-1667826847182 .taskText3{fill:#fff}#mermaid-1667826847182 .task0,#mermaid-1667826847182 .task1,#mermaid-1667826847182 .task2,#mermaid-1667826847182 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1667826847182 .taskTextOutside0,#mermaid-1667826847182 .taskTextOutside1,#mermaid-1667826847182 .taskTextOutside2,#mermaid-1667826847182 .taskTextOutside3{fill:#000}#mermaid-1667826847182 .active0,#mermaid-1667826847182 .active1,#mermaid-1667826847182 .active2,#mermaid-1667826847182 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1667826847182 .activeText0,#mermaid-1667826847182 .activeText1,#mermaid-1667826847182 .activeText2,#mermaid-1667826847182 .activeText3{fill:#000!important}#mermaid-1667826847182 .done0,#mermaid-1667826847182 .done1,#mermaid-1667826847182 .done2,#mermaid-1667826847182 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1667826847182 .doneText0,#mermaid-1667826847182 .doneText1,#mermaid-1667826847182 .doneText2,#mermaid-1667826847182 .doneText3{fill:#000!important}#mermaid-1667826847182 .crit0,#mermaid-1667826847182 .crit1,#mermaid-1667826847182 .crit2,#mermaid-1667826847182 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1667826847182 .activeCrit0,#mermaid-1667826847182 .activeCrit1,#mermaid-1667826847182 .activeCrit2,#mermaid-1667826847182 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1667826847182 .doneCrit0,#mermaid-1667826847182 .doneCrit1,#mermaid-1667826847182 .doneCrit2,#mermaid-1667826847182 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1667826847182 .activeCritText0,#mermaid-1667826847182 .activeCritText1,#mermaid-1667826847182 .activeCritText2,#mermaid-1667826847182 .activeCritText3,#mermaid-1667826847182 .doneCritText0,#mermaid-1667826847182 .doneCritText1,#mermaid-1667826847182 .doneCritText2,#mermaid-1667826847182 .doneCritText3{fill:#000!important}#mermaid-1667826847182 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1667826847182 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1667826847182 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1667826847182 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1667826847182 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1667826847182 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1667826847182 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1667826847182 #compositionEnd,#mermaid-1667826847182 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1667826847182 #aggregationEnd,#mermaid-1667826847182 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1667826847182 #dependencyEnd,#mermaid-1667826847182 #dependencyStart,#mermaid-1667826847182 #extensionEnd,#mermaid-1667826847182 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1667826847182 .branch-label,#mermaid-1667826847182 .commit-id,#mermaid-1667826847182 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1667826847182{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div>]]></content><author><name></name></author><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a post with redirect</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2021/redirect/" rel="alternate" type="text/html" title="a post with redirect"/><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2021/redirect</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2021/redirect/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2021/distill</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">"Python syntax highlighting"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting. 
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2020/github-metadata/" rel="alternate" type="text/html" title="a post with github metadata"/><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2020/github-metadata</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2020/github-metadata/"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p> <h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2> <ul> <li>Propagates the site.github namespace with repository metadata</li> <li>Setting site variables : <ul> <li>site.title</li> <li>site.description</li> <li>site.url</li> <li>site.baseurl</li> </ul> </li> <li>Accessing the metadata - duh.</li> <li>Generating edittable links.</li> </ul> <h2 id="additional-reading">Additional Reading</h2> <ul> <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li> <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li> <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata. <br/></li> </ul> <h2 id="example-metadata">Example MetaData</h2> <ul> <li>Host Name :</li> <li>URL :</li> <li>BaseURL :</li> <li>Archived :</li> <li>Contributors :</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter"/><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2020/twitter</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p> <h1 id="tweet">Tweet</h1> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="timeline">Timeline</h1> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="additional-details">Additional Details</h1> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><category term="formatting"/><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry><entry><title type="html">a post with comments</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2015/comments/" rel="alternate" type="text/html" title="a post with comments"/><published>2015-10-20T15:59:00+00:00</published><updated>2015-10-20T15:59:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2015/comments</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2015/comments/"><![CDATA[<p>This post shows how to add DISQUS comments.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><summary type="html"><![CDATA[an example of a blog post with comments]]></summary></entry><entry><title type="html">a post with math</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2015/math/" rel="alternate" type="text/html" title="a post with math"/><published>2015-10-20T15:12:00+00:00</published><updated>2015-10-20T15:12:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2015/math</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2015/math/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="math"/><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry><entry><title type="html">a post with code</title><link href="https://wp-research-uk.github.io/cw-erm/blog/2015/code/" rel="alternate" type="text/html" title="a post with code"/><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>https://wp-research-uk.github.io/cw-erm/blog/2015/code</id><content type="html" xml:base="https://wp-research-uk.github.io/cw-erm/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>